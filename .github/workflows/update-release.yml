name: Update Latest Release

# Trigger the workflow manually
on:
  workflow_dispatch:

# Permissions required to write to the repository contents
permissions:
  contents: write

jobs:
  update-release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to ensure we get the latest commit

      # Delete the existing "latest" release if it exists
      - name: Delete Existing Latest Release
        run: |
          # Check if the "latest" release exists and delete it
          RELEASE_ID=$(gh release list --json id,name | jq -r '.[] | select(.name == "latest") | .id')
          if [ -n "$RELEASE_ID" ]; then
            gh release delete "latest" --yes
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Delete the existing "latest" tag if it exists
      - name: Delete Existing Latest Tag
        run: |
          # Check if the "latest" tag exists and delete it
          if git rev-parse "latest" >/dev/null 2>&1; then
            git tag -d "latest"
            git push origin :refs/tags/latest
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a new "latest" tag based on the latest commit
      - name: Create New Latest Tag
        run: |
          git tag latest
          git push origin latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a new release with the "latest" tag
      - name: Create New Latest Release
        run: |
          gh release create "latest" \
            --title "latest" \
            --notes "Automatically updated release to the latest commit" \
            --target ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}